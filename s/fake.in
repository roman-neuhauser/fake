#!/bin/sh
# vim: sw=2 sts=2 et fdm=marker cms=\ #\ %s

set -e
set -u

basexy="${basexy:-@basexy@}"

: ${FAKE_BACKEND_CHUNKSIZE:=119}

# need to protect this code from already-created fakes {{{
# this must be syntax-, not command-based,
# to prevent stumbling on a pre-existing fake.
[ "${FAKE_BINDIR-unset}" = unset ] || {
  opath="$PATH"
  npath=

  while [ -n "$opath" ]; do
    seg="${opath%%:*}"
    case "$opath" in
    *:*) opath="${opath#*:}" ;;
    *)   opath= ;;
    esac
    [ "$seg" = "$FAKE_BINDIR" ] || {
      npath="$npath:$seg"
    }
  done
  export PATH="${npath#:}"
}
# }}}

usage() # {{{
{
  local ex=${1-100}
  test $ex -ne 100 ||
    printf >&2 'fake: error: missing operand\n'
  test $ex -ne 101 ||
    printf >&2 "fake: error: -%s cannot be used with -%s\n" "$2" "$3"
  printf >&2 'fake: usage: %s -h | -hh\n' "${0##*/}"
  printf >&2 'fake: usage: %s [-b | -e | -o | -v] [-c] [-x N] CMD [ARG...]\n' "${0##*/}"
  printf >&2 'fake: usage: %s -p [-c] CMD [ARG...]\n' "${0##*/}"
  printf >&2 'fake: usage: %s -t [-c] CMD [ARG...]\n' "${0##*/}"
  printf >&2 'fake: usage: %s -w CMD [ARG...]\n' "${0##*/}"
  if test $ex -gt -2; then
    printf >&2 'fake: use `fake -hh` to display help\n'
  else
    cat >&2 <<-\EOF

	Options:

	  -h      Display short usage help.
	          Given twice, display full help.

	  -b      Body.  Created fake will consist of current stdin.
	  -c      Catchall.  Created fake will receive
	          any uses of CMD not covered by other,
	          more specific fakes.
	  -e      Error.  Created fake will emit current
	          stdin to its stderr.
	  -o      Output.  Created fake will emit current
	          stdin to its stdout.
	  -p      Pass-through.  This backend will remove
	          $FAKE_BINDIR from $PATH and re-exec its argv.
	  -t      Transparent.  Like fake -p but the delegate
	          will have the original $PATH in environment.
	  -v      Verbose.  Reflect received argv on stderr.
	  -w      Which.  Print pathname of the fake that
	          would receive given CMD [ARG...].
	  -x N    Exit code.  Fake should exit with N.
EOF
  fi
  if test $ex -lt 0; then
    exit 0
  fi
  exit $ex
} # }}}

checkopts() # {{{
{
  local bad= curr=$1; shift
  for bad in "$@"; do
    case $opts in
    *$bad*) usage 101 $curr $opts ;;
    esac
  done
  opts="$opts$curr"
} >&2 # }}}

#### SHARED {{{

basexy() # {{{
{
  command "$basexy" "$@"
} # }}}

catchalls() # {{{
{
  local c=
  find "${1:?}" \
    -mindepth 1 \
    -maxdepth 1 \
    -name '*+*' \
  | while read c; do \
      find "$c" -type f; \
    done \
  | sort -rn
} # }}}

findimpl() # {{{
{
  local rv=$1 impldir="$2" argc="$3" hargv="$4"
  local be="$impldir/$argc-${hargv:+/$hargv}"
  eval $rv=
  if test -x "$be"; then
    eval $rv='"$be"'
    return
  fi
  local p=
  test -d "$impldir" || return 1
  hargv="$(printf -- "%s" "$hargv" | sed 's:/::g')"
  for p in $(catchalls "$impldir"); do
    local f="${p#$impldir/}"
    local fargc="${f%%+*}"
    local fargv="${f#*+}"
    fargv="$(printf -- "%s" "$fargv" | sed 's:/::g')"
    [ $argc -ge $fargc ] || continue
    if [ "$hargv" = "$fargv" ] || [ -z "$fargv" ]; then
      eval $rv='"$p"'
      return
    fi
    case "$hargv" in
    "$fargv-"*)
      eval $rv='"$p"'
      return
    ;;
    esac
  done
  return 1
} # }}}

expected() # {{{
{
  local name="${1#$impldir/}"
  set --
  if test "$name" = 0; then
    :
  else
    local argc="${name%%[-+]*}"
    local argv="${name#*[-+]/}"
    local arg=
    local i=1
    argv="$(printf -- "%s" "$argv" | sed 's:/::g')"
    while test $i -le $argc; do
      arg="${argv%%-*}"
      argv="${argv#*-}"
      set -- "$@" "$(printf -- "%s" "$arg" | basexy -d base32hex)"
      i=$((i+1))
    done
  fi
  local fmt=
  case "${name#$argc}" in
  +*) set -- "$@" "[...]" ;;
  esac
  detail expected "$@"
} # }}}

mismatch() # {{{
{
  local impldir="$1" fname=
  shift
  printf -- "fake: error: argv mismatch\n"
  find "$impldir" -mindepth 1 -type f -print | sort | while read fname; do
    expected "$fname"
  done
  detail received "$@"
  exit 100
} >&2 # }}}

detail() # {{{
{
  local mode=$1; shift
  printf -- "fake: %s: %s" "$mode" "$ARGV0"
  test $# -eq 0 || printf -- " %s" "$@"
  printf -- "\n"
} # }}}

hashargs() # {{{
{
  local rv=$1 lhargv= arg=; shift
  eval $rv=
  for arg in "$@"; do
    lhargv="$lhargv-$(printf -- "%s" "$arg" | basexy -e base32hex)"
  done
  lhargv="${lhargv#-}"
  eval $rv='"$lhargv"'
} # }}}

#### SHARED }}}

catchall=0
copy_body=nope
passthrough=0
transparent=0
has_output=0
verbose=0
exitcode=
usage=0
which=0
opts=

while getopts hbceoptvwx: OPTNAME; do
case "$OPTNAME" in
h) usage=$((usage - 1)) ;;

b)  checkopts $OPTNAME e o p t v w
    copy_body=asis ;;
c)  checkopts $OPTNAME w
    catchall=1 ;;
e)  checkopts $OPTNAME b o p t v w
    copy_body=stderr ;;
o)  checkopts $OPTNAME b e p t v w
    copy_body=stdout ;;
p)  checkopts $OPTNAME b e o t v w x
    passthrough=1 ;;
t)  checkopts $OPTNAME b e o p v w x
    transparent=2 ;;
v)  checkopts $OPTNAME b e o p t w
    verbose=1 ;;
w)  checkopts $OPTNAME b c e o p t v x
    which=1 ;;
x)  checkopts $OPTNAME p t w
    exitcode="$OPTARG" ;;
esac
done; shift $((OPTIND - 1))

test $usage -eq 0 || usage $usage

if test $# -eq 0; then
  usage 100
fi

cmd="$1"; shift
bindir=${FAKE_BINDIR:?}
frontend="$bindir/$cmd"
impldir="$bindir/.$cmd"

if test $catchall -eq 0; then
  name="$impldir/$#-"
else
  name="$impldir/$#+"
fi
hargv=
hashargs hargv "$@"

hargv="$(printf "%s" "$hargv" | sed 's:.\{'"$FAKE_BACKEND_CHUNKSIZE"'\}:&/:g')"
hargv="${hargv%/}"
name="$name${hargv:+/$hargv}"

impl=
if test $which -eq 1; then
  findimpl impl "$impldir" "$#" "$hargv" || exit 1
  printf "%s\n" "$impl"
  exit 0
fi

shebang() # {{{
{
  printf "#!%s\n" "/bin/sh"
} # }}}

impl_has_body() # {{{
{
  cat > "${1:?}"
} # }}}
impl_passthrough() # {{{
{
  {
    shebang
    sed 's/^ *//' <<\EOF
    exec "$ARGV0" "$@"
EOF
  } > "${1:?}"
} # }}}
impl_transparent() # {{{
{
  {
    shebang
    sed 's/^ *//' <<\EOF
    argv0=$(command -v "$ARGV0")
    export PATH="$FAKE_BINDIR${PATH+:$PATH}"
    exec "$argv0" "$@"
EOF
  } > "${1:?}"
} # }}}
impl_has_errout() # {{{
{
  {
    shebang
    printf -- "%s\n" "cat >&${2:?} <<\\EOF"
    cat
    printf -- "%s\n" "EOF"
  } > "${1:?}"
} # }}}
impl_verbose() # {{{
{
  {
    shebang
    sed 's/^ *//' <<\EOF
    exec >&2
    printf "%s" "${ARGV0##*/}"
    test $# -eq 0 || printf " %s" "$*"
    printf "\n"
EOF
  } > "${1:?}"
} # }}}
impl_default() # {{{
{
  {
    shebang
  } > "${1:?}"
} # }}}

mkdir -p "${name%/*}"

if test $copy_body = asis; then
  impl_has_body "$name"
elif test $copy_body = stderr; then
  impl_has_errout "$name" 2
elif test $copy_body = stdout; then
  impl_has_errout "$name" 1
elif test $verbose -ne 0; then
  impl_verbose "$name"
elif test $passthrough -ne 0; then
  impl_passthrough "$name"
elif test $transparent -ne 0; then
  impl_transparent "$name"
else
  impl_default "$name"
fi
test -z "$exitcode" || printf -- >> "$name" "exit %s\n" "$exitcode"
chmod +x "$name"

{
  shebang
  sed -n '/^#### SHARED {{{/,/### SHARED }}}/p' < "$0"
  sed -n '/^#### BEGIN FRONTEND$/,$p' < "$0" |
  sed \
    -e "s#FAKE_BINDIR#$FAKE_BINDIR" \
    -e "s#PATH#$PATH" \
    -e "s#basexy#$basexy" \
    -e "s#chunksize#$FAKE_BACKEND_CHUNKSIZE" \
    -e "s#impldir#$impldir"
} > "$frontend"
chmod a+x "$frontend"
exit

#### BEGIN FRONTEND

impldir="#impldir#"
chunksize="#chunksize#"
basexy="${basexy:-#basexy#}"

export FAKE_BINDIR="#FAKE_BINDIR#"
export PATH="#PATH#"

hashargs hargv "$@"

hargv="$(printf "%s" "$hargv" | sed 's:.\{'"$chunksize"'\}:&/:g')"
hargv="${hargv%/}"

export ARGV0="${0##*/}"

impl=
if findimpl impl "$impldir" "$#" "$hargv"; then
  exec "$impl" "$@"
fi

mismatch "$impldir" "$@"
