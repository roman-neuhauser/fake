.\" vim: tw=72 fdm=marker cms=.\\"\ %s
.
.\" FRONT MATTER {{{
.Dd Mar 01, 2017
.Os
.Dt FAKE 1
.
.Sh NAME
.Nm fake
.Nd Mocks and Stubs For the Command Line
.\" FRONT MATTER }}}
.
.\" SYNOPSIS {{{
.Sh SYNOPSIS
.Nm
. Fl h
.Nm
. Op Fl b No | Fl e No | Fl o
. Op Fl c
. Op Fl v
. Op Fl x Ar N
. Ar CMD
. Op Ar ARG Ns ...
.Nm
. Fl p
. Op Fl c
. Ar CMD
. Op Ar ARG Ns ...
.Nm
. Fl w
. Ar CMD
. Op Ar ARG Ns ...
.\" SYNOPSIS }}}
.
.\" DESCRIPTION {{{
.Sh DESCRIPTION
.Nm
provides an easy interface to create mocks of any command.
A mock can either respond to any argument vector or only to specific one(s),
it can have whatever body you provide, or it can use builtin behaviors:
be quiet or reflect the received arguments, with an exit code of your
choice.
.Pp
The directory where the mocks are created is communicated to
.Nm
using the
.Ev $FAKE_BINDIR
environment variable;
it's up to you to make sure this directory is in your
.Ev $PATH .
.Pp
At creation time,
.Nm
recursively creates directory
.Ev $FAKE_BINDIR Ns Pa /.C/
as necessary, executable file
.Ev $FAKE_BINDIR Ns Pa /C
.Pq the Dq frontend ,
and another in
.Ev $FAKE_BINDIR Ns Pa /.C/
whose name encodes expected number of arguments and their values
.Pq Dq backend .
.
At run time, the frontend executes the most specific backend for the given
arguments; if no backend matches, the frontend will emit diagnostic messages
on stderr.
.\" }}}
.
.\" OPTIONS {{{
.Sh OPTIONS
.Bl -tag -width xx
.It Fl h
Display usage information.
Given twice, display full help.
.It Fl b
Body.
Use standard input as the body of the backend being created.
.It Fl c
Catchall.
Created backend will receive any uses of
. Ar CMD
not covered by another, more specific backend.
.It Fl e
Error.
Use standard input as standard error of the backend being created.
.It Fl o
Output.
Use standard input as standard ouput of the backend being created.
.It Fl p
Pass-through.
Created mock will re-execute its argv again after removing
. Ev $FAKE_BINDIR
from
. Ev $PATH .
.It Fl v
Verbose.
Reflect received argv on stderr.
.It Fl w
Which.
Print the pathname of the backend that would receive given
. Ar CMD Op Ar ARG Ns ... Ns .
If no backend matches the given command line,
exits 1 with no other outputs.
.It Fl x Ar N
Exit code.
Use
. Ar N
as the exit code of the backend being created.
.El
.\" }}}
.
.\" OPERANDS {{{
.Sh OPERANDS
.Bl -tag -width xx
.It Ar CMD
Command name to fake.
.It Ar ARG Ns ...
Expected arguments.
.El
.\" }}}
.
.\" ENVIRONMENT {{{
.Sh ENVIRONMENT
.Bl -tag -width xx
.It Ev FAKE_BINDIR
Directory where
.Nm
will create the mocks.
It is up to the user to make sure this directory
is in their
.Ev $PATH .
.El
.\" }}}
.
.\" FILES {{{
.\" .Sh FILES
.\" }}}
.
.\" EXIT STATUS {{{
.Sh EXIT STATUS
.Ex -std
.\" }}}

.\" EXAMPLES {{{
.Sh EXAMPLES
.Bd -literal -offset xx
$ export FAKE_BINDIR=$(mktemp -d)
$ PATH=$FAKE_BINDIR:$PATH
$ fake -b foo bar <<EOF
echo HELLO
EOF
$ foo bar
HELLO
$ foo
fake: error: argv mismatch
fake: expected: foo bar
fake: received: foo
.Ed
.\" }}}
.
.\" SEE ALSO {{{
.Sh SEE ALSO
.Xr basex 1 ,
.Xr sh 1 .
.\" }}}
.
.\" AUTHORS {{{
.Sh AUTHORS
.An Roman Neuhauser Aq Mt rneuhauser+fake@sigpipe.cz
.\" AUTHORS }}}
.
.\" BUGS {{{
.Sh BUGS
No doubt plentiful.
Please report them at
.Aq Lk https://github.com/roman-neuhauser/fake/issues .
.\" BUGS }}}
